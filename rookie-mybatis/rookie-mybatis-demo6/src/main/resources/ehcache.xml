<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="../config/ehcache.xsd">
 <!-- 磁盘保存路径 -->
 <diskStore path="C:\44\ehcache" />
 
 <defaultCache 
   maxElementsInMemory="10000" 
   maxElementsOnDisk="10000000"
   eternal="false" 
   overflowToDisk="true" 
   timeToIdleSeconds="120"
   timeToLiveSeconds="120" 
   diskExpiryThreadIntervalSeconds="120"
   memoryStoreEvictionPolicy="LRU">
 </defaultCache>
</ehcache>
 
<!-- 
属性说明：
l diskStore：指定数据在磁盘中的存储位置。
l defaultCache：当借助CacheManager.add("demoCache")创建Cache时，EhCache便会采用<defalutCache/>指定的的管理策略
 
以下属性是必须的：
l maxElementsInMemory - 在内存中缓存的element的最大数目 
l maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大
l eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断
l overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上
 
以下属性是可选的：
l timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大
l timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大
 diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.
l diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。
l diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作
l memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）
 -->

<!--

        <?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="ehcache.xsd">

&lt;!&ndash; ehcache官网配置示例：http://www.ehcache.org/ehcache.xml &ndash;&gt;

&lt;!&ndash; 缓存的bean，必须实现Serializable序列化 &ndash;&gt;

&lt;!&ndash;
一级缓存失效的四种情况:

1.SqlSession不同，Cache会失效
  SqlSession ss2=ssf.openSession();
  EmployeeMapper mapper2=ss2.getMapper(EmployeeMapper.class);

  Employee emp2=mapper2.getEmployeeById(38);
  System.out.println(emp2);

2.sqlSession相同，查询条件相同，但两次查询之间执行了增删改操作
  mapper.addEmployeeBysql(new Employee(null,"yiwen","yiwen@qq.com","1"));

3.SqlSession相同，查询条件不同
  Employee emp3=mapper.getEmployeeById(41);
  System.out.println(emp3);

4.sqlSession相同，查询条件相同，手动清除了缓存clearCache()
  ss.clearCache();
&ndash;&gt;

&lt;!&ndash; 缓存文件存放的磁盘路径，如果没有自定义，会使用系统默认的磁盘路径 &ndash;&gt;
&lt;!&ndash; <diskStore path="F:/cache"/> &ndash;&gt;
&lt;!&ndash;    <diskStore path="/usr/local/ehcache"/>&ndash;&gt;

&lt;!&ndash; 自定义缓存属性 &ndash;&gt;
<defaultCache maxElementsInMemory="10000"
              eternal="false"
              timeToIdleSeconds="300"
              timeToLiveSeconds="600"
              overflowToDisk="true"/>

&lt;!&ndash; 上面配置中，缓存最大存活60s，最少存活30s &ndash;&gt;
&lt;!&ndash; 如果创建之后无任何访问，30s之后就会被销毁；如果一直有访问，那么一直持续到60s才会被销毁 &ndash;&gt;

&lt;!&ndash;
name：                           Cache的唯一标识
maxElementsInMemory：            缓存中允许创建的最大对象数
maxElementsOnDisk：              磁盘中最大缓存对象数，若是0表示无穷大
eternal：                        Element是否永久有效，一但设置了，timeout将不起作用，对象永不过期。
timeToIdleSeconds：              缓存数据的钝化时间，也就是在一个元素消亡之前，两次访问时间的最大时间间隔值，这只能在元素不是永久驻留时有效，如果该值是 0 就意味着元素可以停顿无穷长的时间。
timeToLiveSeconds：              缓存数据的生存时间，也就是一个元素从构建到消亡的最大时间间隔值，这只能在元素不是永久驻留时有效，如果该值是0就意味着元素可以停顿无穷长的时间。
overflowToDisk：                 内存不足时，是否启用磁盘缓存。
diskPersistent：                 是否缓存虚拟机重启期数据
diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒
diskSpoolBufferSizeMB：          这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区
memoryStoreEvictionPolicy：      缓存满了之后的淘汰算法。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）
&ndash;&gt;

</ehcache>-->
